# Task list for installing and configuring my preferred software
#
# Copyright 2025 林博仁(Buo-ren Lin) <buo.ren.lin@gmail.com>
# SPDX-License-Identifier: CC-BY-SA-4.0+

- name: Ensure that the software repository local cache is fresh
  ansible.builtin.import_tasks: ensure-software-repository-local-cache-is-fresh.yml

- name: Deploy .profile.d, which is used to manage user-wide settings.
  ansible.builtin.include_tasks: deploy-.profile.d.yml

- name: >-
    Setup the OpenSSH service for remote administration convenience.
  become: true
  ansible.builtin.package:
    name: openssh-server

- name: >-
    Setup Fail2ban to prevent bruteforce attack of the SSH service.
  become: true
  ansible.builtin.package:
    name: fail2ban

- name: >-
    Allow workstation to be broadcasted via Multicast for access
    convenience.
  become: true
  notify:
    - Reload Avahi daemon config
  ansible.builtin.replace:
    path: /etc/avahi/avahi-daemon.conf
    regexp: '^publish-workstation=.*$'
    replace: publish-workstation=yes

- name: >-
    Ensure that the GHex hex editor is installed, which is useful
    in examining binary files.
  become: true
  ansible.builtin.package:
    name:
      - ghex

- name: >-
    Ensure that the Git version control system is installed, which
    is used to manage personal and third-party projects.
  become: true
  ansible.builtin.package:
    name:
      - git

- name: >-
    Ensure that the Git Large File System(LFS) software is
    installed, which allows managing huge binary objects in a Git
    repository.
  become: true
  ansible.builtin.package:
    name:
      - git-lfs

- name: >-
    Ensure that the gridsite-clients package is installed, which
    provides the `urlencode` command for encoding and decoding
    percent-encoded URLs.
  become: true
  ansible.builtin.package:
    name:
      - gridsite-clients

- name: >-
    Ensure that the htop process viewer utility is installed,
    which is used to examine and manipulate the running processes.
  become: true
  ansible.builtin.package:
    name:
      - htop

- name: >-
    Ensure that the iftop utility is installed, which is used to
    monitor the data transfer of the network connections.
  become: true
  ansible.builtin.package:
    name:
      - iftop

- name: >-
    Ensure that the iotop utility is installed, which is used to
    monitor the data transfer of the storage devices.
  become: true
  ansible.builtin.package:
    name:
      - iotop

- name: >-
    Ensure that the Kate Editor is installed, which is a powerful
    plaintext file editor with syntax highlighting and other
    powerful features.
  become: true
  ansible.builtin.package:
    name:
      - kate

- name: Check whether the Kate Editor has the File System Browser plugin enabled.
  become: false
  changed_when: false
  register: kate_file_system_browser_plugin_presence_raw
  ansible.builtin.command:
    argv:
      - kreadconfig5
      - --file
      - '{{ ansible_user_dir }}/.local/share/kate/anonymous.katesession'
      - --group
      - Kate Plugins
      - --key
      - katefilebrowserplugin

- name: Enable the File System Browser plugin of the Kate editor by default.
  become: false
  register: kate_fsb_plugin_enablement_result
  changed_when: kate_fsb_plugin_enablement_result.rc == 0
  ansible.builtin.command:
    argv:
      - kwriteconfig5
      - --file
      - '{{ ansible_user_dir }}/.local/share/kate/anonymous.katesession'
      - --group
      - Kate Plugins
      - --key
      - katefilebrowserplugin
      - 'true'

- name: >-
    Ensure that the KeePassXC application is installed, which is
    used to manage secret information in the KeePass Password
    Safes.
  become: true
  ansible.builtin.package:
    name:
      - keepassxc

- name: >-
    Ensure that the lm-sensors package is installed, which allows
    one to read the system's hardware sensor data.
  become: true
  ansible.builtin.package:
    name:
      - lm-sensors

- name: >-
    Ensure that the pipx utility is installed, which is used to
    cleanly manage Python applications using separate virtual
    environments.
  become: true
  ansible.builtin.package:
    name:
      - pipx

- name: >-
    Ensure that the tmux terminal multiplexer is installed,
    which allows multiple terminals be created on a single one.
  become: true
  ansible.builtin.package:
    name:
      - tmux

- name: >-
    Ensure that the vcsh config manager is installed, which
    allows using the Git version control system to manage my
    configuration files.
  become: true
  ansible.builtin.package:
    name:
      - vcsh

- name: Import vcsh-managed configurations.
  rescue:
    - name: Interrupt play if any of the block sub-tasks failed.
      ansible.builtin.fail:
        msg: 'Error: Unable to import vcsh-managed configurations.'
  block:
    - name: Ensure the vcsh hook directories are created.
      loop:
        - ~/.config/vcsh/hooks-available
        - ~/.config/vcsh/hooks-enabled
      loop_control:
        loop_var: dir
      ansible.builtin.file:
        path: '{{ dir }}'
        state: directory
        mode: '0755'

    - name: >-
        Install vcsh pre-merge hook to avoid import failure due to
        pre-existing config files.
      ansible.builtin.copy:
        src: vcsh-hooks/pre-merge-10-unclobber.sh
        dest: ~/.config/vcsh/hooks-available/pre-merge-10-unclobber.sh
        mode: '0755'

    - name: Ensure the unclobber pre-merge hook is enabled
      ansible.builtin.file:
        path: ~/.config/vcsh/hooks-enabled/pre-merge-10-unclobber.sh
        src: ../hooks-available/pre-merge-10-unclobber.sh
        state: link

    - name: >-
        Satisfy the runtime dependency of the vcsh repository query
        utility.
      become: true
      ansible.builtin.package:
        name:
          - curl
          - jq

    - name: >-
        Query all vcsh-managed configuration repositories by
        Buo-ren Lin.
      ansible.builtin.set_fact:
        vcsh_repo_names_raw: >-
          {{
            lookup(
              "ansible.builtin.lines",
              "{{ role_path | quote }}/controller-utils/query-brlin-vcsh-repositories.sh",
              wantlist=True
            )
          }}

    - name: Import vcsh-managed configurations.
      register: import_vcsh
      changed_when: import_vcsh.rc == 0
      # 10: Repo already exists
      failed_when: >-
        import_vcsh.rc != 0
        and import_vcsh.rc != 10
      loop: '{{ vcsh_repo_names_raw }}'
      loop_control:
        loop_var: vcsh_repo_name
      ansible.builtin.command:
        argv:
          - vcsh
          - clone
          - https://github.com/brlin-tw/{{ vcsh_repo_name }}.git
          - '{{ vcsh_repo_name | replace("vcsh-", "") }}'

- name: >-
    Ensure that the vim plaintext editor is installed, which
    allows high efficiency text editing.
  become: true
  ansible.builtin.package:
    name:
      - vim

- name: >-
    Ensure that the WireGuard VPN software is installed, which
    is used to connect some of the VPN services.
  become: true
  ansible.builtin.package:
    name:
      - wireguard

- name: Install codecs for multimedia playback.
  become: true
  when: ansible_distribution == "Ubuntu"
  ansible.builtin.package:
    name:
      - ubuntu-restricted-extras

- name: Deploy the KDE desktop environment and its associated applications
  ansible.builtin.import_tasks: deploy-kde.yml

- name: Deploy GNOME-like desktop environments.
  ansible.builtin.import_tasks: deploy-gnome.yml

- name: Deploy the XFCE desktop environment.
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: 'Error: Unable to deploy the XFCE desktop environment.'
  block:
    - name: >-
        Ensure that the XFCE desktop environment is installed, which
        provides light-weight desktop experience.
      become: true
      ansible.builtin.package:
        name:
          - xfce4

    - name: >-
        Workaround an issue where the XFCE notification daemon may erroneously
        launched in the KDE desktop environment(#18).
      ansible.builtin.systemd_service:
        scope: user
        name: xfce4-notifyd.service
        masked: true

- name: Deploy preferred input method configurations
  ansible.builtin.import_tasks: deploy-input-methods.yml

- name: >-
    Ensure that the curl HTTP(S)/FTP/etc... client is installed, which
    is used for service testing.
  become: true
  ansible.builtin.package:
    name:
      - curl

- name: >-
    Setup the LXD container engine, which is used for building
    snaps and for testing
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: 'Error: Unable to setup the LXD container engine.'
  block:
    - name: >-
        Ensure that the LXD container engine is installed, which is used
        for building snaps and for testing.
      become: true
      community.general.snap:
        name: lxd

    - name: >-
        Add the running user to the LXD user group to allow easy access
        to the container engine.
      become: true
      ansible.builtin.user:
        name: '{{ ansible_user_id }}'
        groups:
          - lxd
        append: true

    - name: Making LXD bridge interfaces not managed by NetworkManager.
      become: true
      notify:
        - Apply udev rule changes
        - Reload NetworkManager configuration
      ansible.builtin.copy:
        src: udev.rules.d/dont-manage-lxd-managed-bridges.rules
        dest: /etc/udev/rules.d/85-nm-unmanaged-lxd.rules
        owner: root
        group: root
        mode: '0644'

- name: >-
    Ensure that the Snapcraft packaging tool is installed, which is
    used for building snaps.
  become: true
  community.general.snap:
    name: snapcraft
    classic: true

- name: >-
    Ensure that the Asciiquarium utility is installed, which presents a
    nice aquarium view in the text terminal.
  become: true
  community.general.snap:
    name: asciiquarium

- name: >-
    Ensure that the Steam gaming platform is installed, which is used
    to manage some of the games of mine.
  when: >-
    ansible_architecture == "i386"
      or ansible_architecture == "x86_64"
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: 'Error: Unable to install the Steam gaming platform.'
  block:
    - name: >-
        Query the foreign architectures enabled in the APT package
        management system.
      register: dpkg_foreign_arches_raw
      changed_when: false
      ansible.builtin.command: dpkg --print-foreign-architectures

    - name: >-
        Ensure that the i386 architecture of the APT package management
        system is enabled to install Steam's runtime dependencies.
      when: >-
        ansible_architecture == "x86_64"
          and "i386" not in dpkg_foreign_arches_raw.stdout_lines
      become: true
      register: dpkg_add_architecture_result
      changed_when: dpkg_add_architecture_result.rc == 0
      ansible.builtin.command: dpkg --add-architecture i386

    - name: >-
        Reload APT local cache to apply foreign architecture settings.
      when: ansible_architecture == "x86_64"
      ansible.builtin.include_tasks: ensure-software-repository-local-cache-is-fresh.yml

    - name: >-
        Ensure that the Steam gaming platform is installed, which is used
        to manage some of my games.
      become: true
      ansible.builtin.package:
        name: steam-installer

- name: >-
    Ensure that the Git Cola application is installed, which is used to
    manage Git repositories.
  ansible.builtin.include_tasks: deploy-git-cola.yml

- name: >-
    Ensure that the html-query(hq) utility is installed, which is
    used to parse the HTML document in some scripts.
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: 'Error: Unable to deploy the html-query(hq) utility.'
  block:
    - name: >-
        Ensure that the html-query(hq) utility is installed,
        which is used to parse the HTML document in some scripts.
      become: true
      community.general.snap:
        name: orf-hq

    - name: >-
        Setup convenient command aliases for the html-query
        utility.
      become: true
      community.general.snap_alias:
        name: orf-hq
        alias: hq

- name: >-
    Ensure that the KolourPaint application is installed, which
    is used for annotate the screenshots.
  become: true
  ansible.builtin.package:
    name: kolourpaint

- name: >-
    Ensure that the bindfs utility is installed, which is used to
    workaround limitations regarding paths containing spaces of
    build utilities like Make.
  become: true
  ansible.builtin.package:
    name: bindfs

- name: >-
    Ensure that the Epson Imagescan V2 application is installed.
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: >-
          Error: Unable to deploy the Epson Imagescan V2 application.
  block:
    - name: >-
        Ensure that the Epson Imagescan V2 application is installed,
        which is used to support scanning document/photos from an
        Epson scanner on GNU+Linux
      become: true
      community.general.snap:
        name: iscan

    - name: >-
        Ensure that the iscan snap is connected to the raw-usb snapd
        confinement interface, so that it can communicate with the
        USB scanners.
      become: true
      register: iscan_interface_connect_result_raw
      changed_when: >-
        iscan_interface_connect_result_raw.rc == 0
          and not iscan_interface_connect_result_raw.stdout_lines
      ansible.builtin.command: snap connect iscan:raw-usb

- name: >-
    Ensure that the QtQR application is installed, which is used to
    scan QR codes without resort to using the mobile devices.
  become: true
  ansible.builtin.package:
    name: qtqr

- name: Enable the Flatpak package support.
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: >-
          Error: Unable to enable the Flatpak package support.
  block:
    - name: >-
        Enable the Flatpak stable versions PPA software source.
      # Refer PPA support status at:
      # https://launchpad.net/~flatpak/+archive/ubuntu/stable
      when: >-
        ansible_distribution == 'Ubuntu'
          and (
            ansible_distribution_version == '22.04'
            or ansible_distribution_version == '20.04'
          )
      ansible.builtin.apt_repository:
        repo: ppa:flatpak/stable

    - name: Ensure that the Flatpak runtime is installed.
      become: true
      ansible.builtin.package:
        name: flatpak

    - name: >-
        Ensure that the Flatpak plugin of the GNOME Software
        application is installed.
      become: true
      ansible.builtin.package:
        name: gnome-software-plugin-flatpak

    - name: >-
        Ensure that the Flatpak backend of the KDE Discover
        application is installed.
      become: true
      ansible.builtin.package:
        name: plasma-discover-backend-flatpak

    - name: Ensure that the Flathub repository is enabled.
      become: true
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo

- name: Ensure that the OBS Studio application is installed.
  become: true
  community.general.flatpak:
    name: com.obsproject.Studio
    remote: flathub

- name: >-
    Ensure that the Image Density Fixer application is installed, for improving
    the quality of OCR-ing camera-captured documents.
  become: true
  community.general.snap:
    name: image-density-fixer

- name: >-
    Ensure that the sshpass utility is installed, which is required for Ansible
    to connect to SSH servers.
  become: true
  ansible.builtin.package:
    name: sshpass

- name: >-
    Ensure that the tldr utility is installed, which is used to viewing tldr
    pages.
  rescue:
    - name: Interrupt the play if any of the block tasks failed.
      ansible.builtin.fail:
        msg: 'Error: Unable to install the tldr utility'
  block:
    - name: >-
        Ensure that the tldr utility is installed, which is used to viewing tldr
        pages.
      become: true
      ansible.builtin.package:
        name: tealdeer

    - name: Update the local cache of the tldr pages.
      become: false
      register: tldr_update_result_raw
      changed_when: tldr_update_result_raw.rc == 0
      ansible.builtin.command: tldr --update

- name: >-
    Ensure that the OCRmyPDF application is installed, which is used for OCR-ing
    scanned documents.
  become: true
  community.general.snap:
    name: ocrmypdf
    channel: edge

- name: >-
    Ensure that the Audacity application is installed, which is used for
    recording/editing audio tracks.
  become: true
  ansible.builtin.package:
    name: audacity

- name: >-
    Ensure that the VLC application is installed, which is used for playing
    multimedia files.
  become: true
  ansible.builtin.package:
    name: vlc

- name: >-
    Ensure that the Inkscape application is installed, which is used to
    create vector images.
  become: true
  ansible.builtin.package:
    name: inkscape

- name: >-
    Ensure that the Avahi Discover application is installed, for discovering
    other hosts on the same network.
  become: true
  ansible.builtin.package:
    name: avahi-discover

- name: >-
    Ensure that the equivs utility is installed, for creating meta-packages to
    easily install/remove build/runtime dependencies.
  when: ansible_os_family == "Debian"
  become: true
  ansible.builtin.package:
    name: equivs

- name: >-
    Ensure that the Lossless Cut application is installed, which is used to make
    video clips without re-encoding them.
  become: true
  community.general.flatpak:
    name: no.mifi.losslesscut
    remote: flathub

- name: >-
    Ensure that the Webcamoid application is installed, which is used to make
    video clips without re-encoding them.
  become: true
  community.general.flatpak:
    name: io.github.webcamoid.Webcamoid
    remote: flathub

- name: >-
    Ensure that the img2pdf utility is installed, which is used to create
    PDF documents from multiple images captured by a camera.
  become: true
  ansible.builtin.package:
    name: img2pdf

- name: >-
    Ensure that the FIO utility is installed, which is used to benchmark
    storage device performances.
  become: true
  ansible.builtin.package:
    name: fio

- name: >-
    Ensure that the wl-clipboard utility is installed, which is used to process
    copied text using command-line utilities.
  become: true
  ansible.builtin.package:
    name: wl-clipboard

- name: >-
    Ensure that the OpenCC utility is installed, which is used to convert
    Traditional Chinese text to Simplified Chinese, and vice-versa.
  become: true
  ansible.builtin.package:
    name: opencc

- name: >-
    Ensure that the Docker Engine container runtime and its related utilities
    are installed, which is used to construct testing environments for some of
    my projects.
  ansible.builtin.include_tasks: deploy-docker.yml

- name: >-
    Ensure that the ShellCheck utility is installed, which is
    used to validate shell scripts.
  become: true
  community.general.snap:
    name: shellcheck

- name: >-
    Ensure that the GNOME Tweaks utility is installed,
    which is used to change the Gtk themes settings.
  become: true
  ansible.builtin.package:
    name: gnome-tweaks

- name: Ensure that the Oracle VirtualBox application is installed, which is used to construct testing environments for some of my projects.
  ansible.builtin.include_tasks: deploy-virtualbox.yml

- name: Ensure that the Vagrant utility is installed, which is used to construct testing environments that is not practical by using containers.
  ansible.builtin.include_tasks: deploy-vagrant.yml

- name: Ensure that the .profile.d solution is installed, which is used to conveniently configure my user profile settings.
  ansible.builtin.include_tasks: deploy-.profile.d.yml

- name: Configure user profile settings.
  ansible.builtin.include_tasks: configure-user-profile.yml

- name: Ensure that the .bashrc.d solution is installed, which is used to conveniently configure my bash runcommands settings.
  ansible.builtin.include_tasks: deploy-.bashrc.d.yml

- name: Configure bash runcommands settings.
  ansible.builtin.include_tasks: configure-user-bashrc.yml

- name: Ensure that the pre-commit framework is installed, which is used to run automated checks in most of my projects.
  register: precommit_pipx_install_raw
  become: false
  changed_when: >-
    precommit_pipx_install_raw.rc == 0
      and "already seems to be installed"
        not in precommit_pipx_install_raw.stdout
  environment:
    LANG: C
  ansible.builtin.command: pipx install pre-commit

- name: Ensure that the REUSE tool is installed, which is used to ensure REUSE standard compliance in most of my projects.
  register: reuse_pipx_install_raw
  become: false
  changed_when: >-
    reuse_pipx_install_raw.rc == 0
      and "already seems to be installed"
        not in reuse_pipx_install_raw.stdout
  environment:
    LANG: C
  ansible.builtin.command: pipx install reuse

- name: Ensure that the Konqueror browser is installed, which is used for reading manual and info pages in KDE.
  become: true
  ansible.builtin.package:
    name: konqueror

- name: Ensure that KDE Connect is installed, which is for syncing data with my mobile devices in the KDE desktop environment.
  become: true
  ansible.builtin.package:
    name: kdeconnect
